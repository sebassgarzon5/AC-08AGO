<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editor de Canvas</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 0;
        }
        #controls {
            margin-bottom: 20px;
            text-align: center;
        }
        canvas {
            border: 1px solid black;
            display: block;
            margin: 0 auto;
        }
        .button-group {
            display: inline-block;
            margin: 5px;
        }
    </style>
</head>
<body>
    <div id="controls">
        <label for="shape">Selecciona una forma:</label>
        <select id="shape">
            <option value="rectangle">Rectángulo</option>
            <option value="circle">Círculo</option>
        </select>
        <button id="rotate">Rotar Figura</button>
        <label for="scale">Escalar Figura:</label>
        <input type="range" id="scale" min="0.5" max="2" step="0.1" value="1">
        <div class="button-group">
            <button id="moveLeft">Izquierda</button>
            <button id="moveRight">Derecha</button>
            <button id="moveUp">Arriba</button>
            <button id="moveDown">Abajo</button>
        </div>
        <button id="clear">Limpiar Canvas</button>
    </div>
    <canvas id="canvas" width="800" height="600"></canvas>
    <script>
		// Obtener referencias a los elementos
		const canvas = document.getElementById('canvas');
		const ctx = canvas.getContext('2d');
		const shapeSelect = document.getElementById('shape');
		const rotateButton = document.getElementById('rotate');
		const scaleSlider = document.getElementById('scale');
		const clearButton = document.getElementById('clear');
		const moveLeftButton = document.getElementById('moveLeft');
		const moveRightButton = document.getElementById('moveRight');
		const moveUpButton = document.getElementById('moveUp');
		const moveDownButton = document.getElementById('moveDown');

		let currentShape = 'rectangle';
		let shapes = [];
		let selectedShapeIndex = null;

		// Manejar la selección de formas
		shapeSelect.addEventListener('change', (e) => {
			currentShape = e.target.value;
		});

		// Manejar el clic en el canvas para dibujar formas
		canvas.addEventListener('click', (e) => {
			const rect = canvas.getBoundingClientRect();
			const x = e.clientX - rect.left;
			const y = e.clientY - rect.top;

			// Comprobar si se hizo clic en una figura existente para seleccionarla
			selectedShapeIndex = null;
			for (let i = shapes.length - 1; i >= 0; i--) {
				if (isPointInShape(x, y, shapes[i])) {
					selectedShapeIndex = i;
					scaleSlider.value = shapes[i].scale; // Sincronizar el slider con la escala de la figura seleccionada
					break;
				}
			}

			// Si no se seleccionó ninguna figura, agregar una nueva
			if (selectedShapeIndex === null) {
				let shape;
				if (currentShape === 'rectangle') {
					shape = { type: 'rectangle', x, y, width: 100, height: 50, rotation: 0, scale: 1 };
				} else if (currentShape === 'circle') {
					shape = { type: 'circle', x, y, radius: 50, rotation: 0, scale: 1 };
				}
				shapes.push(shape);
				selectedShapeIndex = shapes.length - 1;
			}
			drawShapes();
		});

		// Función para comprobar si un punto está dentro de una figura
		function isPointInShape(x, y, shape) {
			ctx.save();
			ctx.translate(shape.x, shape.y);
			ctx.rotate(shape.rotation);
			ctx.scale(shape.scale, shape.scale);
			ctx.beginPath();
			let isInShape = false;

			if (shape.type === 'rectangle') {
				ctx.rect(-shape.width / 2, -shape.height / 2, shape.width, shape.height);
				isInShape = ctx.isPointInPath(x - shape.x, y - shape.y);
			} else if (shape.type === 'circle') {
				ctx.arc(0, 0, shape.radius, 0, Math.PI * 2);
				isInShape = ctx.isPointInPath(x - shape.x, y - shape.y);
			}

			ctx.restore();
			return isInShape;
		}

		// Función para dibujar todas las formas en el canvas
		function drawShapes() {
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			shapes.forEach((shape, index) => {
				ctx.save();
				ctx.translate(shape.x, shape.y);
				ctx.rotate(shape.rotation);
				ctx.scale(shape.scale, shape.scale);

				ctx.beginPath();
				if (shape.type === 'rectangle') {
					ctx.rect(-shape.width / 2, -shape.height / 2, shape.width, shape.height);
				} else if (shape.type === 'circle') {
					ctx.arc(0, 0, shape.radius, 0, Math.PI * 2);
				}
				ctx.fillStyle = 'rgba(0, 100, 255, 0.3)';
				ctx.fill();
				ctx.strokeStyle = index === selectedShapeIndex ? 'red' : 'black';
				ctx.stroke();

				ctx.restore();
			});
		}

		// Manejar la rotación de la figura seleccionada
		rotateButton.addEventListener('click', () => {
			if (selectedShapeIndex !== null) {
				shapes[selectedShapeIndex].rotation += Math.PI / 4; // Rotar 45 grados
				drawShapes();
			}
		});

		// Manejar el escalado de la figura seleccionada
		scaleSlider.addEventListener('input', () => {
			if (selectedShapeIndex !== null) {
				shapes[selectedShapeIndex].scale = parseFloat(scaleSlider.value);
				drawShapes();
			}
		});

		// Manejar los botones de traslado
		moveLeftButton.addEventListener('click', () => {
			if (selectedShapeIndex !== null) {
				shapes[selectedShapeIndex].x -= 10;
				drawShapes();
			}
		});

		moveRightButton.addEventListener('click', () => {
			if (selectedShapeIndex !== null) {
				shapes[selectedShapeIndex].x += 10;
				drawShapes();
			}
		});

		moveUpButton.addEventListener('click', () => {
			if (selectedShapeIndex !== null) {
				shapes[selectedShapeIndex].y -= 10;
				drawShapes();
			}
		});

		moveDownButton.addEventListener('click', () => {
			if (selectedShapeIndex !== null) {
				shapes[selectedShapeIndex].y += 10;
				drawShapes();
			}
		});

		// Manejar el botón de limpiar
		clearButton.addEventListener('click', () => {
			shapes = [];
			selectedShapeIndex = null;
			drawShapes();
		});
    </script>
</body>
</html>
